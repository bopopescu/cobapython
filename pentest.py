import mysql.connector
import urllib.request as urllib2
import threading
import pycurl
from io import BytesIO
import xml.etree.ElementTree as ET
import time
import requests
import datetime
import os
# db = mysql.connector.connect(
#     host="103.41.204.195",
#     user="brofist",
#     passwd="brofist19#",
#     database="nsam_tools"
# )

db = mysql.connector.connect(
    host="127.0.0.1",
    user="root",
    passwd="",
    database="brofistool"
)

conn = db.cursor()
hasil_test = []

def proxy_check(id,ip,port):
    address = str(ip) + ":" + str(port)
    print(address,threading.currentThread().getName(), 'Starting')
    now = datetime.datetime.now()
    started = now.strftime("%Y-%m-%d %H:%M:%S")
    try:
        proxy_handler = urllib2.ProxyHandler({'http': address})
        opener = urllib2.build_opener(proxy_handler)
        opener.addheaders = [('User-agent', 'Mozilla/5.0')]
        urllib2.install_opener(opener)
        req = urllib2.Request("http://103.41.204.195/ping.php")
        sock = urllib2.urlopen(req, timeout=10)
        rs = sock.read(1000)
        if rs is None:
            proxy_result = "No"
        else:
            proxy_result = "Yes"
        now = datetime.datetime.now()
        finished = now.strftime("%Y-%m-%d %H:%M:%S")
    except:
        proxy_result = "No"
        now = datetime.datetime.now()
        finished = now.strftime("%Y-%m-%d %H:%M:%S")

    isi_test = (id,started,finished,proxy_result)
    hasil_test.append(isi_test)
    print(threading.currentThread().getName(), 'Exiting')

def dns_check():
    # dig (domain information groper)
    link = "103.41.204.195"
    perintah = "dig %s"% link
    with os.popen(perintah) as f:
        if 'ANSWER SECTION' in f.read():
            dns_result = "Yes"
        else:
            dns_result = "No"


def modem_token():
    b_obj = BytesIO()
    crl = pycurl.Curl()

    crl.setopt(crl.URL, 'http://192.168.8.1/api/webserver/SesTokInfo')
    crl.setopt(crl.CUSTOMREQUEST, "GET")
    crl.setopt(crl.WRITEDATA, b_obj)
    crl.perform()
    crl.close()
    result = b_obj.getvalue()
    xml = ET.fromstring(result)
    return xml

def modem_connect(dial):
    url = "http://192.168.8.1/api/dialup/mobile-dataswitch"
    prereq = modem_token()
    session = prereq.find('SesInfo').text
    token = prereq.find('TokInfo').text

    payload = "<request>\n\t<dataswitch>%s</dataswitch>\n</request>"  % dial
    headers = {
      'Content-Type': 'text/xml; charset=UTF-8',
      'Cookie': session,
      '__RequestVerificationToken': token
    }

    response = requests.request("POST", url, headers=headers, data = payload)
    print(response.text.encode('utf8'))
    time.sleep(3)

def modem_profile(apn):
    url = "http://192.168.8.1/api/dialup/profiles"
    prereq = modem_token()
    session = prereq.find('SesInfo').text
    token = prereq.find('TokInfo').text

    payload = "<request>\r\n" \
              "<Delete>0</Delete>\r\n" \
              "<SetDefault>0</SetDefault>\r\n" \
              "<Modify>2</Modify>\r\n" \
              "<Profile>\r\n" \
              "<Index>1</Index>\r\n" \
              "<IsValid>1</IsValid>\r\n" \
              "<Name>General</Name>\r\n" \
              "<ApnIsStatic>1</ApnIsStatic>\r\n" \
              "<ApnName>%s</ApnName>\r\n" \
              "<DialupNum>*99#</DialupNum>\r\n" \
              "<Username></Username>\r\n" \
              "<Password></Password>\r\n" \
              "<AuthMode>0</AuthMode>\r\n" \
              "<IpIsStatic>0</IpIsStatic>\r\n" \
              "<IpAddress>0.0.0.0</IpAddress>\r\n" \
              "<Ipv6Address></Ipv6Address>\r\n" \
              "<DnsIsStatic></DnsIsStatic>\r\n" \
              "<PrimaryDns></PrimaryDns>\r\n" \
              "<SecondaryDns></SecondaryDns>\r\n" \
              "<PrimaryIpv6Dns></PrimaryIpv6Dns>\r\n" \
              "<SecondaryIpv6Dns></SecondaryIpv6Dns>\r\n" \
              "<ReadOnly>0</ReadOnly>\r\n" \
              "<iptype></iptype>\r\n" \
              "</Profile>\r\n" \
              "</request>"  % apn
    headers = {
        'Content-Type': 'text/xml; charset=UTF-8',
        'Cookie': session,
        '__RequestVerificationToken': token
    }

    response = requests.request("POST", url, headers=headers, data=payload)
    print(response.text.encode('utf8'))
    time.sleep(3)

def modem_main(apn):
    print(apn)
    modem_connect(0)
    modem_profile(apn)
    modem_connect(1)

if db.is_connected():
    print("Connected Succesfully!")
    sql_apn = "SELECT apn FROM t_fraud_test_progress_detail GROUP BY apn"
    conn.execute(sql_apn)
    apns = conn.fetchall()

    for apn in apns:
        modem_main(apn[0])
        sql = "SELECT id,ip_address,url,port " \
              "FROM t_fraud_test_progress_detail " \
              "WHERE suspect_fraud IS NULL " \
              "AND modem = 'modem-1' " \
              "AND apn = '%s' " \
              "AND test_type = 'proxy tunneling' " \
              "LIMIT 100" % apn[0]
        conn.execute(sql)
        result = conn.fetchall()
        for data in result:
            id = data[0]
            ip = data[2]
            # if ip is None:
            if ip == "":
                ip = data[1]
            port = data[3]
            if port is None:
                port = 1080
            t = threading.Thread(target=proxy_check, args=(id,ip,port))
            t.start()
t.join()
time.sleep(15)
for hasil in hasil_test:
    querynya = "UPDATE t_fraud_test_progress_detail " \
               "SET suspect_fraud = '%s', " \
               "started_at = '%s', " \
               "finished_at = '%s' " \
               "WHERE id = %s" % (hasil[3],hasil[1],hasil[2],hasil[0])
    # print(querynya)
    conn.execute(querynya)
db.commit()

# dns_check()